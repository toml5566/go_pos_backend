// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: menus.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addMenuItem = `-- name: AddMenuItem :one
INSERT INTO menus (id, user_id, shop_name, product_id, product_name, product_price, catalog, description)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, shop_name, product_id, product_name, product_price, catalog, description, created_at
`

type AddMenuItemParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	ShopName     string    `json:"shop_name"`
	ProductID    uuid.UUID `json:"product_id"`
	ProductName  string    `json:"product_name"`
	ProductPrice string    `json:"product_price"`
	Catalog      string    `json:"catalog"`
	Description  string    `json:"description"`
}

func (q *Queries) AddMenuItem(ctx context.Context, arg AddMenuItemParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, addMenuItem,
		arg.ID,
		arg.UserID,
		arg.ShopName,
		arg.ProductID,
		arg.ProductName,
		arg.ProductPrice,
		arg.Catalog,
		arg.Description,
	)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShopName,
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.Catalog,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
DELETE FROM menus
WHERE user_id = $1 AND id = $2
`

type DeleteMenuItemParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) DeleteMenuItem(ctx context.Context, arg DeleteMenuItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItem, arg.UserID, arg.ID)
	return err
}

const getAllMenuItems = `-- name: GetAllMenuItems :many
SELECT id, user_id, shop_name, product_id, product_name, product_price, catalog, description, created_at FROM menus 
WHERE shop_name = $1
`

func (q *Queries) GetAllMenuItems(ctx context.Context, shopName string) ([]Menu, error) {
	rows, err := q.db.QueryContext(ctx, getAllMenuItems, shopName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Menu{}
	for rows.Next() {
		var i Menu
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ShopName,
			&i.ProductID,
			&i.ProductName,
			&i.ProductPrice,
			&i.Catalog,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenuItem = `-- name: UpdateMenuItem :one
UPDATE menus
SET product_name = $3, product_price = $4, catalog = $5, description = $6
WHERE user_id = $1 AND id = $2
RETURNING id, user_id, shop_name, product_id, product_name, product_price, catalog, description, created_at
`

type UpdateMenuItemParams struct {
	UserID       uuid.UUID `json:"user_id"`
	ID           uuid.UUID `json:"id"`
	ProductName  string    `json:"product_name"`
	ProductPrice string    `json:"product_price"`
	Catalog      string    `json:"catalog"`
	Description  string    `json:"description"`
}

func (q *Queries) UpdateMenuItem(ctx context.Context, arg UpdateMenuItemParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, updateMenuItem,
		arg.UserID,
		arg.ID,
		arg.ProductName,
		arg.ProductPrice,
		arg.Catalog,
		arg.Description,
	)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShopName,
		&i.ProductID,
		&i.ProductName,
		&i.ProductPrice,
		&i.Catalog,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

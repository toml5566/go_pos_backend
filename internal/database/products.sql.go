// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (id, user_id, name, price, description)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, name, price, description, created_at
`

type CreateProductParams struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	Name        string    `json:"name"`
	Price       string    `json:"price"`
	Description string    `json:"description"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.ID,
		arg.UserID,
		arg.Name,
		arg.Price,
		arg.Description,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE user_id = $1 AND id = $2
`

type DeleteProductParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) DeleteProduct(ctx context.Context, arg DeleteProductParams) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, arg.UserID, arg.ID)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, user_id, name, price, description, created_at FROM products
WHERE user_id = $1
`

func (q *Queries) GetAllProducts(ctx context.Context, userID uuid.UUID) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT id, user_id, name, price, description, created_at FROM products
WHERE user_id = $1 AND id = $2 LIMIT 1
`

type GetProductParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) GetProduct(ctx context.Context, arg GetProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, arg.UserID, arg.ID)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getProductsByName = `-- name: GetProductsByName :many
SELECT id, user_id, name, price, description, created_at FROM products
WHERE user_id = $1 AND name = $2
`

type GetProductsByNameParams struct {
	UserID uuid.UUID `json:"user_id"`
	Name   string    `json:"name"`
}

func (q *Queries) GetProductsByName(ctx context.Context, arg GetProductsByNameParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductsByName, arg.UserID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $3, price = $4, description = $5
WHERE user_id = $1 AND id = $2
RETURNING id, user_id, name, price, description, created_at
`

type UpdateProductParams struct {
	UserID      uuid.UUID `json:"user_id"`
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Price       string    `json:"price"`
	Description string    `json:"description"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.UserID,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Description,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
